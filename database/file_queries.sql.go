// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: file_queries.sql

package database

import (
	"context"
)

const createFile = `-- name: CreateFile :exec
INSERT INTO files (id, name, path, url, size, content_type, owner_id, created_at, updated_at)
VALUES (@id, @name, @path, @url, @size, @content_type, @owner_id, NOW(), NOW())
`

func (q *Queries) CreateFile(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createFile)
	return err
}

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM files WHERE id = @id
`

func (q *Queries) DeleteFile(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteFile)
	return err
}

const getFileByID = `-- name: GetFileByID :one
SELECT id, name, path, url, size, content_type, owner_id, created_at, updated_at FROM files WHERE id = @id
`

func (q *Queries) GetFileByID(ctx context.Context) (File, error) {
	row := q.db.QueryRow(ctx, getFileByID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.Url,
		&i.Size,
		&i.ContentType,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFilesByOwner = `-- name: ListFilesByOwner :many
SELECT id, name, path, url, size, content_type, owner_id, created_at, updated_at FROM files WHERE owner_id = @owner_id
`

func (q *Queries) ListFilesByOwner(ctx context.Context) ([]File, error) {
	rows, err := q.db.Query(ctx, listFilesByOwner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Path,
			&i.Url,
			&i.Size,
			&i.ContentType,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFile = `-- name: UpdateFile :exec
UPDATE files
SET name = @name, path = @path, url = @url, size = @size, content_type = @content_type, updated_at = NOW()
WHERE id = @id
`

func (q *Queries) UpdateFile(ctx context.Context) error {
	_, err := q.db.Exec(ctx, updateFile)
	return err
}
