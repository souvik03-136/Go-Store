// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_queries.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, username, email, password_hash, created_at, updated_at)
VALUES (@id, @username, @email, @password_hash, NOW(), NOW())
`

func (q *Queries) CreateUser(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createUser)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = @id
`

func (q *Queries) DeleteUser(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteUser)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, created_at, updated_at FROM users WHERE email = @email
`

func (q *Queries) GetUserByEmail(ctx context.Context) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password_hash, created_at, updated_at FROM users WHERE id = @id
`

func (q *Queries) GetUserByID(ctx context.Context) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password_hash, created_at, updated_at FROM users WHERE username = @username
`

func (q *Queries) GetUserByUsername(ctx context.Context) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET username = @username, email = @email, password_hash = @password_hash, updated_at = NOW()
WHERE id = @id
`

func (q *Queries) UpdateUser(ctx context.Context) error {
	_, err := q.db.Exec(ctx, updateUser)
	return err
}
